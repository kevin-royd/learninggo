// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_GetSteam_FullMethodName = "/Greeter/GetSteam"
	Greeter_PutSteam_FullMethodName = "/Greeter/PutSteam"
	Greeter_AllSteam_FullMethodName = "/Greeter/AllSteam"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	GetSteam(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (Greeter_GetSteamClient, error)
	PutSteam(ctx context.Context, opts ...grpc.CallOption) (Greeter_PutSteamClient, error)
	AllSteam(ctx context.Context, opts ...grpc.CallOption) (Greeter_AllSteamClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) GetSteam(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (Greeter_GetSteamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_GetSteam_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterGetSteamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_GetSteamClient interface {
	Recv() (*StreamRspData, error)
	grpc.ClientStream
}

type greeterGetSteamClient struct {
	grpc.ClientStream
}

func (x *greeterGetSteamClient) Recv() (*StreamRspData, error) {
	m := new(StreamRspData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) PutSteam(ctx context.Context, opts ...grpc.CallOption) (Greeter_PutSteamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], Greeter_PutSteam_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterPutSteamClient{stream}
	return x, nil
}

type Greeter_PutSteamClient interface {
	Send(*StreamReqData) error
	CloseAndRecv() (*StreamRspData, error)
	grpc.ClientStream
}

type greeterPutSteamClient struct {
	grpc.ClientStream
}

func (x *greeterPutSteamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterPutSteamClient) CloseAndRecv() (*StreamRspData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamRspData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) AllSteam(ctx context.Context, opts ...grpc.CallOption) (Greeter_AllSteamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], Greeter_AllSteam_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterAllSteamClient{stream}
	return x, nil
}

type Greeter_AllSteamClient interface {
	Send(*StreamReqData) error
	Recv() (*StreamRspData, error)
	grpc.ClientStream
}

type greeterAllSteamClient struct {
	grpc.ClientStream
}

func (x *greeterAllSteamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterAllSteamClient) Recv() (*StreamRspData, error) {
	m := new(StreamRspData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	GetSteam(*StreamReqData, Greeter_GetSteamServer) error
	PutSteam(Greeter_PutSteamServer) error
	AllSteam(Greeter_AllSteamServer) error
	//mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) GetSteam(*StreamReqData, Greeter_GetSteamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSteam not implemented")
}
func (UnimplementedGreeterServer) PutSteam(Greeter_PutSteamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutSteam not implemented")
}
func (UnimplementedGreeterServer) AllSteam(Greeter_AllSteamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllSteam not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_GetSteam_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).GetSteam(m, &greeterGetSteamServer{stream})
}

type Greeter_GetSteamServer interface {
	Send(*StreamRspData) error
	grpc.ServerStream
}

type greeterGetSteamServer struct {
	grpc.ServerStream
}

func (x *greeterGetSteamServer) Send(m *StreamRspData) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_PutSteam_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).PutSteam(&greeterPutSteamServer{stream})
}

type Greeter_PutSteamServer interface {
	SendAndClose(*StreamRspData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type greeterPutSteamServer struct {
	grpc.ServerStream
}

func (x *greeterPutSteamServer) SendAndClose(m *StreamRspData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterPutSteamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_AllSteam_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).AllSteam(&greeterAllSteamServer{stream})
}

type Greeter_AllSteamServer interface {
	Send(*StreamRspData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type greeterAllSteamServer struct {
	grpc.ServerStream
}

func (x *greeterAllSteamServer) Send(m *StreamRspData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterAllSteamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSteam",
			Handler:       _Greeter_GetSteam_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutSteam",
			Handler:       _Greeter_PutSteam_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllSteam",
			Handler:       _Greeter_AllSteam_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
