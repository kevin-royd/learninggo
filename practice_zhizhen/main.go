package main

import "fmt"

func main() {
	/**
	指针:存储的是另一个变量的内存地址
	获取变量在内存中的地址 & + 变量名称
	建议：
	1、不要对 map、slice、channel 这类引用类型使用指针；
	2、如果需要修改方法接收者内部的数据或者状态时，需要使用指针；
	3、如果需要修改参数的值或者内部数据时，也需要使用指针类型的参数；
	4、如果是比较大的结构体，每次参数传递或者调用方法都要内存拷贝，内存占用多，这时候可以考虑使用指针；
	5、像 int、bool 这样的小数据类型没必要使用指针；
	6、如果需要并发安全，则尽可能地不要使用指针，使用指针一定要保证并发安全；
	7、指针最好不要嵌套，也就是不要使用一个指向指针的指针，虽然 Go 语言允许这么做，但是这会使你的代码变得异常复杂。
	总结：
	为了使编程变得更简单，指针在高级的语言中被逐渐淡化，但是它也的确有自己的优势：修改数据的值和节省内存。
	所以在 Go 语言的开发中我们要尽可能地使用值类型，而不是指针类型，因为值类型可以使你的开发变得更简单，并且也是并发安全的。
	如果你想使用指针类型，就要参考我上面讲到的使用指针的条件，看是否满足，要在满足和必须的情况下才使用指针。


	*/
	intVariables := 100
	fmt.Printf("intVariables=%d,地址=%v\n", intVariables, &intVariables)
	//	定义指针变量 注：定义指针时不能使用缩减写法
	var pointerVariable *int = &intVariables
	fmt.Printf("pointerVariable=%v,地址=%v\n", pointerVariable, &pointerVariable)
	//	注：定义什么类型的变量就会在内存中生成类型的指针、不同类型的指针进行访问时会报错的
	//	指针的作用：
	//	1. 节省内存空间、提高程序的执行效率
	//	2. 间接访问与修改变量的值
	//	注：
	//	1.操作指针都不能使用：=
	//	2.不能把变量的值直接赋值为指针类型,指针
	//	3.指针可以指向另一个指针，不推荐
	*pointerVariable = 200
	fmt.Println(intVariables)

	/*
		值类型：整型，浮点型，bool，array，string， 栈中分配
		引用类型：指针，slice，map，chan，interface，堆中分配
	*/
}
